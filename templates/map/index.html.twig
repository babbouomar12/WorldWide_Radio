<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Cesium Country Click + Elegant Sidebar</title>
    <script src="https://cesium.com/downloads/cesiumjs/releases/1.115/Build/Cesium/Cesium.js"></script>
    <link href="https://cesium.com/downloads/cesiumjs/releases/1.115/Build/Cesium/Widgets/widgets.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6.5.0/turf.min.js"></script>
    <style>
        html, body {
            margin: 0; padding: 0; height: 100%; width: 100%;
            overflow: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #121212;
            color: #eee;
        }
        #now-playing-sidebar {
            position: fixed;
            top: 0;
            left: 0;
            width: 320px;
            height: 100%;
            background: linear-gradient(135deg, #1e1e2f, #28293d);
            box-shadow: 3px 0 10px rgba(0,0,0,0.8);
            padding: 1.5em 1.8em;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            z-index: 1100;
            user-select: none;
            border-right: 3px solid #4b4b6b;
        }
        #search-container {
            margin-bottom: 1.5em;
        }
        #country-search {
            width: 100%;
            padding: 10px 15px;
            border-radius: 8px;
            border: none;
            background: #2a2a44;
            color: #aad8ff;
            font-size: 1em;
            box-shadow: inset 0 0 6px rgba(175, 210, 255, 0.2);
            outline: none;
            transition: box-shadow 0.3s;
        }
        #country-search:focus {
            box-shadow: 0 0 0 2px #4f8ef7;
        }
        #country-name {
            font-size: 1.6em;
            font-weight: 700;
            margin: 0 0 1em 0;
            color: #aad8ff;
            text-align: center;
            text-shadow: 0 0 8px #4f8ef7;
        }
        #radio-list {
            flex: 1;
            overflow-y: auto;
            padding: 0;
            margin: 0 0 1.2em 0;
            list-style: none;
            border-top: 1px solid #3a3a55;
            border-bottom: 1px solid #3a3a55;
            scrollbar-width: thin;
            scrollbar-color: #4f8ef7 #1e1e2f;
        }
        #radio-list::-webkit-scrollbar {
            width: 8px;
        }
        #radio-list::-webkit-scrollbar-track {
            background: #1e1e2f;
        }
        #radio-list::-webkit-scrollbar-thumb {
            background-color: #4f8ef7;
            border-radius: 10px;
        }
        #radio-list li {
            margin: 0.3em 0;
        }
        #radio-list button {
            width: 100%;
            background: #2a2a44;
            border: none;
            padding: 10px 15px;
            font-size: 1em;
            color: #aad8ff;
            border-radius: 8px;
            cursor: pointer;
            text-align: left;
            transition: background 0.3s, box-shadow 0.3s;
            box-shadow: inset 0 0 6px rgba(175, 210, 255, 0.2);
            font-weight: 600;
            user-select: none;
        }
        #radio-list button:hover,
        #radio-list button:focus {
            background: #4f8ef7;
            color: #fff;
            outline: none;
            box-shadow: 0 0 12px #4f8ef7;
        }
        #now-playing-text {
            margin-top: auto;
            margin-bottom: 0.8em;
            font-size: 1.1em;
            font-weight: 600;
            color: #82b1ff;
            text-align: center;
            text-shadow: 0 0 6px #4f8ef7;
            user-select: text;
        }
        #radio-player {
            width: 100%;
            outline: none;
            border-radius: 8px;
            background: #1a1a2e;
            box-shadow: 0 0 8px rgba(79, 142, 247, 0.7);
            cursor: pointer;
            transition: box-shadow 0.3s ease;
            display: none;
        }
        #cesiumContainer {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin-left: 320px;
        }
        #search-results {
            position: absolute;
            width: calc(100% - 30px);
            max-height: 200px;
            overflow-y: auto;
            background: #2a2a44;
            border-radius: 0 0 8px 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
            display: none;
            z-index: 1200;
        }
        .search-result-item {
            padding: 10px 15px;
            cursor: pointer;
            color: #aad8ff;
            transition: background 0.2s;
        }
        .search-result-item:hover {
            background: #4f8ef7;
            color: #fff;
        }
    </style>
</head>
<body>

<div id="now-playing-sidebar">
    <div id="search-container">
        <input type="text" id="country-search" placeholder="Search for a country..." autocomplete="off">
        <div id="search-results"></div>
    </div>
    <h3 id="country-name">Select a country</h3>
    <ul id="radio-list"></ul>
    <div id="now-playing-text">You are not listening to anything.</div>
    <audio id="radio-player" preload="none" style="display: none;"></audio>
</div>

<div id="cesiumContainer"></div>

<script>
    const viewer = new Cesium.Viewer('cesiumContainer', {
        animation: false,
        timeline: false,
        baseLayerPicker: false,
        selectionIndicator: false,
        terrainProvider: new Cesium.EllipsoidTerrainProvider()
    });

    viewer.imageryLayers.removeAll();
    viewer.imageryLayers.addImageryProvider(
        new Cesium.OpenStreetMapImageryProvider()
    );

    let turfFeatures = [];
    let entities = [];
    let countryNames = [];

    Cesium.GeoJsonDataSource.load('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json')
        .then(dataSource => {
            viewer.dataSources.add(dataSource);
            viewer.zoomTo(dataSource);

            entities = dataSource.entities.values;
            countryNames = entities.map(e => e.properties.name.getValue());

            turfFeatures = entities.map(entity => {
                const polygon = entity.polygon.hierarchy.getValue(Cesium.JulianDate.now());
                const positions = polygon.positions.map(p => {
                    const carto = Cesium.Cartographic.fromCartesian(p);
                    return [Cesium.Math.toDegrees(carto.longitude), Cesium.Math.toDegrees(carto.latitude)];
                });

                if (positions.length > 0 &&
                    (positions[0][0] !== positions[positions.length - 1][0] || positions[0][1] !== positions[positions.length - 1][1])) {
                    positions.push(positions[0]);
                }

                return turf.polygon([positions], { name: entity.properties.name.getValue() });
            });

            const handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);
            handler.setInputAction(click => {
                const cartesian = viewer.camera.pickEllipsoid(click.position, viewer.scene.globe.ellipsoid);
                if (!cartesian) return;

                const cartographic = Cesium.Cartographic.fromCartesian(cartesian);
                const lon = Cesium.Math.toDegrees(cartographic.longitude);
                const lat = Cesium.Math.toDegrees(cartographic.latitude);

                const point = turf.point([lon, lat]);
                let matched = null;

                for (const feature of turfFeatures) {
                    if (turf.booleanPointInPolygon(point, feature)) {
                        matched = feature.properties.name;
                        break;
                    }
                }

                if (matched) {
                    showRadios(matched);
                    const entity = entities.find(e => e.properties.name.getValue() === matched);
                    if (entity) viewer.flyTo(entity);
                }
            }, Cesium.ScreenSpaceEventType.LEFT_CLICK);
        })
        .catch(e => {
            console.error('GeoJSON load failed:', e);
            alert('Failed to load country data. Check console.');
        });

    // Show all global radio dots
    fetch('/api/all-radios')
        .then(res => res.json())
        .then(radios => {
            radios.forEach(radio => {
                viewer.entities.add({
                    position: Cesium.Cartesian3.fromDegrees(radio.lon, radio.lat),
                    point: {
                        pixelSize: 8,
                        color: Cesium.Color.LIMEGREEN,
                        outlineColor: Cesium.Color.BLACK,
                        outlineWidth: 1
                    },
                    description: `
                        <strong>${radio.name}</strong><br>
                        <audio controls style="width:100%; margin-top:10px;">
                            <source src="${radio.url}" type="audio/mpeg">
                            Your browser does not support the audio element.
                        </audio>
                    `
                });
            });
        })
        .catch(err => console.error("Failed to load radios:", err));

    // Search + sidebar logic
    const searchInput = document.getElementById('country-search');
    const searchResults = document.getElementById('search-results');

    searchInput.addEventListener('input', function() {
        const query = this.value.toLowerCase();
        searchResults.innerHTML = '';

        if (query.length < 2) {
            searchResults.style.display = 'none';
            return;
        }

        const matches = countryNames.filter(name => name.toLowerCase().includes(query)).slice(0, 10);
        if (matches.length === 0) {
            searchResults.innerHTML = '<div class="search-result-item">No matches found</div>';
        } else {
            matches.forEach(name => {
                const div = document.createElement('div');
                div.className = 'search-result-item';
                div.textContent = name;
                div.addEventListener('click', () => {
                    searchInput.value = name;
                    searchResults.style.display = 'none';
                    showRadios(name);
                    const entity = entities.find(e => e.properties.name.getValue() === name);
                    if (entity) viewer.flyTo(entity);
                });
                searchResults.appendChild(div);
            });
        }
        searchResults.style.display = matches.length ? 'block' : 'none';
    });

    document.addEventListener('click', function(e) {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
            searchResults.style.display = 'none';
        }
    });

    function showRadios(country) {
        const sidebar = document.getElementById('now-playing-sidebar');
        const title = document.getElementById('country-name');
        const list = document.getElementById('radio-list');
        const player = document.getElementById('radio-player');
        const nowPlayingText = document.getElementById('now-playing-text');

        sidebar.style.display = 'flex';
        title.textContent = `🎧 Radios in ${country}`;
        list.innerHTML = '';

        nowPlayingText.textContent = 'Select a radio to listen';
        player.pause();
        player.src = '';

        fetch(`/api/radios?country=${encodeURIComponent(country)}`)
            .then(res => res.json())
            .then(radios => {
                list.innerHTML = '';
                if (!radios.length) {
                    list.innerHTML = '<li style="color:#999;">No radios found.</li>';
                    return;
                }

                radios.forEach(r => {
                    const li = document.createElement('li');
                    const button = document.createElement('button');
                    button.textContent = `▶ ${r.name}`;
                    button.onclick = () => {
                        player.src = r.url;
                        player.play().catch(e => console.error('Playback error', e));
                        nowPlayingText.textContent = `You are actually listening to ${r.name}`;
                    };
                    li.appendChild(button);
                    list.appendChild(li);
                });
            })
            .catch(err => {
                list.innerHTML = '<li style="color:#f66;">Error loading radios.</li>';
                console.error(err);
            });
    }
</script>

</body>
</html>
